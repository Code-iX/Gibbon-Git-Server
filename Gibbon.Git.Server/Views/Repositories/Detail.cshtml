@model RepositoryDetailModel
@{
    Layout = "~/Views/Repositories/_RepositoriesLayout.cshtml";
    ViewBag.Title = Resources.Repository_Detail_Title;
}

@if (Model == null)
{
    @await Html.PartialAsync("~/Views/Shared/_ItemNotFound.cshtml")
    return;
}

<div class="pure-form pure-form-aligned detail">
    <fieldset>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Name)
            @Model.Name
            @switch (Model.Status)
            {
                case RepositoryDetailStatus.Valid:
                    break;
                case RepositoryDetailStatus.Missing:
                    <span class="status">(Missing)</span>
                    break;
                case RepositoryDetailStatus.Unknown:
                default:
                    <span class="status">(Status Unknown)</span>
                    break;
            }
        </div>
        <div class="pure-control-group">
            <label>@Resources.Repository_Detail_Location</label>
            <button class="pure-button copy-to-clip-button" data-clipboard-text="@Model.GitUrl">
                <i class="fa fa-copy"></i>
            </button>
            <span class="git-url-text">@Model.GitUrl</span>
            <span class="git-url-actions">
                <div class="ide-dropdown">
                    <button class="pure-button ide-dropdown-button">
                        <i class="fa fa-code"></i> @Resources.Repository_Detail_OpenWith
                    </button>
                    <div class="ide-dropdown-menu">
                        @foreach (var ide in Enum.GetValues<Gibbon.Git.Server.Configuration.IdeType>())
                        {
                            if (ide != Gibbon.Git.Server.Configuration.IdeType.None)
                            {
                                <a href="@Gibbon.Git.Server.Helpers.IdeHelper.GetIdeProtocol(ide, Model.GitUrl)">
                                    @Gibbon.Git.Server.Helpers.IdeHelper.GetIdeDisplayName(ide)
                                </a>
                            }
                        }
                    </div>
                </div>
                <a href="@Url.Action("Download", new { name = Model.Name })" class="pure-button download-zip-button">
                    <i class="fa fa-download"></i> @Resources.Repository_Detail_DownloadZip
                </a>
            </span>
        </div>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="pure-control-group">
                <label>@Resources.Repository_Detail_Location_Personal</label>
                <button class="pure-button copy-to-clip-button" data-clipboard-text="@Model.PersonalGitUrl">
                    <i class="fa fa-copy"></i>
                </button>
                <span class="personal-url-text">@Model.PersonalGitUrl</span>
                <span class="git-url-actions">
                    <div class="ide-dropdown">
                        <button class="pure-button ide-dropdown-button">
                            <i class="fa fa-code"></i> @Resources.Repository_Detail_OpenWith
                        </button>
                        <div class="ide-dropdown-menu">
                            @foreach (var ide in Enum.GetValues<Gibbon.Git.Server.Configuration.IdeType>())
                            {
                                if (ide != Gibbon.Git.Server.Configuration.IdeType.None)
                                {
                                    <a href="@Gibbon.Git.Server.Helpers.IdeHelper.GetIdeProtocol(ide, Model.PersonalGitUrl)">
                                        @Gibbon.Git.Server.Helpers.IdeHelper.GetIdeDisplayName(ide)
                                    </a>
                                }
                            }
                        </div>
                    </div>
                </span>
            </div>
        }

        <div class="pure-control-group">
            @Html.LabelFor(m => m.Group)
            @Model.Group
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Description)
            @Model.Description
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymous)
            @if (Model.AllowAnonymous)
            {
                @Resources.Repository_Detail_Yes
            }
            else
            {
                @Resources.Repository_Detail_No
            }
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymousPush)
            @Model.AllowAnonymousPush.ToString()
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUseGlobal)
            @Html.CheckBoxFor(m => m.LinksUseGlobal, new
                {
                    disabled = "disabled"
                })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksRegex)
            @Html.TextBoxFor(m => m.LinksRegex, new
                {
                    @readonly = "readonly"
                })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUrl)
            @Html.TextBoxFor(m => m.LinksUrl, new
                {
                    @readonly = "readonly"
                })
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.Users)
            <span>
                @foreach (var user in Model.Users)
                {
                    @Html.ActionLink(user.DisplayName, "Detail", "Users", new
                        {
                            username = user.Username
                        }, new
                        {
                            title = user.Username
                        })
                    if (user != Model.Users.Last())
                    {
                        @:,
                    }
                }
            </span>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.Administrators)
            <span>
                @foreach (var admin in Model.Administrators)
                {
                    @Html.ActionLink(admin.DisplayName, "Detail", "Users", new
                        {
                            username = admin.Username
                        }, new
                        {
                            title = admin.Username
                        })
                    if (admin != Model.Administrators.Last())
                    {
                        @:,
                    }
                }
            </span>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.Teams)
            <span>
                @foreach (var team in Model.Teams)
                {
                    @Html.ActionLink(team.DisplayName, "Detail", "Teams", new
                        {
                            teamname = team.Name
                        }, null)
                    if (team != Model.Teams.Last())
                    {
                        @:,
                    }
                }
            </span>
        </div>

        <div class="pure-controls">
            <a class="pure-button" href="@Url.Action("Index")">
                <i class="fa fa-long-arrow-left"></i> @Resources.Repository_Detail_Back
            </a>
            @if (Model.IsCurrentUserAdministrator)
            {
                <a class="pure-button" href="@Url.Action("Edit", new { name = Model.Name })">
                    <i class="fa fa-pencil-square-o"></i> @Resources.Repository_Detail_Edit
                </a>
                <a class="pure-button" href="@Url.Action("Delete", new { name = Model.Name })">
                    <i class="fa fa-trash-o"></i> @Resources.Repository_Detail_Delete
                </a>
            }
        </div>
    </fieldset>
</div>

@section scripts {
    <script src="~/js/ide-dropdown.js"></script>
}
